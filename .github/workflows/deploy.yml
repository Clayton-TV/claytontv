on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Build and deploy to production
    runs-on: ubuntu-24.04 [Beta]

    env:
      PYTHON_VERSION: '3.13.1'
      NODE_VERSION: '22'
      APP_BASE_DIR: /srv/clayton.tv
      GIT_REPO_URL: git@github.com:clayton-tv/claytontv.git

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Set up Python {{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install pyton dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node dependencies
        run: |
          npm ci
          npm run build

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # --- Define variables ---
            export RELEASE_TIMESTAMP=$(date +%Y%m%d%H%M%S)
            export RELEASES_DIR="${{ env.APP_BASE_DIR }}/releases"
            export NEW_RELEASE_DIR="${RELEASES_DIR}/${RELEASE_TIMESTAMP}"
            export CURRENT_SYMLINK="${{ env.APP_BASE_DIR }}/current"
            export GIT_REPO_URL="${{ env.GIT_REPO_URL }}"
            export GIT_COMMIT_SHA="${{ github.sha }}"
            
            # Ensure the releases directory exists
            mkdir -p "${RELEASES_DIR}"
            
            echo ">>> Creating release directory: ${NEW_RELEASE_DIR}"
            mkdir -p "${NEW_RELEASE_DIR}"
            
            echo ">>> Cloning repository (${GIT_REPO_URL}) commit (${GIT_COMMIT_SHA})"
            git clone --depth 1 --branch main "${GIT_REPO_URL}" "${NEW_RELEASE_DIR}"
            cd "${NEW_RELEASE_DIR}"
            git checkout "${GIT_COMMIT_SHA}"
            
            echo ">>> Creating virtual environment"
            python3.13 -m venv venv
            source venv/bin/activate
            
            echo ">>> Installing Python dependencies"
            pip install --upgrade pip
            pip install -r requirements.txt
            
            echo ">>> Installing Node dependencies"
            npm ci
            npm run build
            
            echo ">>> Running database migrations"
            python manage.py migrate --noinput
            
            echo ">>> Collecting static files"
            python manage.py collectstatic --noinput
            
            echo ">>> Atomically update current symlink: ${CURRENT_SYMLINK} -> ${NEW_RELEASE_DIR}"
            ln -sfn "${NEW_RELEASE_DIR}" "${CURRENT_SYMLINK}"
            
            echo ">>> Restarting the application"
            # Gunicorn is assumed to be running as a systemd service configured to use the current symlink
            sudo systemctl restart clayton-tv
            
            echo ">>> Cleaning up old releases"
            # Keep the last 5 releases
            ls -dt "${RELEASES_DIR}"/* | tail -n +6 | xargs rm -rf
            
            echo ">>> Deployment to commit ${GIT_COMMIT_SHA} completed successfully!"
            
